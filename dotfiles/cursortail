#! perl

# Based on the digital clock example

# USAGE EXAMPLE:
# urxvt -rv -tr -sh 30 -ls +sb -vb -fade 30 -fn "xft:Bitstream Vera Sans Mono:pixelsize=12" --urgentOnBell --perl-lib ./ -pe cursortail 

# use strict;

# Speed in milliseconds - higher speed will fade faster
# my $fade_speed = 0.05;

# you could try other sets of colors
# my @color_list = qw(
#   51 45 39 33 27 21 21 20 20 20 19 19 19
# );

sub on_init {
  my $self = shift;

  $self->{tail_cells} = {};
  my $colorlist   = $self->x_resource("%.colorlist");
  $colorlist   =~ /^\s*\d+(\s*\d+)*\s*$/ or $colorlist   = "51 45 39 33 27 21 21 20 20 20 19 19 19";
  @{$self->{colorlist}} = split " ", $colorlist;
  my $fadespeed = $self->x_resource("%.fade_speed");
  $fadespeed =~ /^\s*(\d+|\d*\.\d+)\s*$/           or $fadespeed = "0.05";
  $self->{fade_speed}=$fadespeed;

  # force a refresh to do our fading

  return ();
}

# before refreshing: replace upper right with the clock display
sub on_refresh_begin {
  my $self = shift;
  my $colors = scalar @{$self->{colorlist}}-1;

  foreach my $cell (values %{ $self->{tail_cells} }) {
    my ($row, $col, $color, $original_rend) = @$cell;
    $color++;
    if($color > $colors) {
        delete $self->{tail_cells}->{"$row,$col"};
    } else {
        my $original_rend = $self->ROW_r($row)->[$col];
        my $r = urxvt::SET_BGCOLOR($original_rend, @{$self->{colorlist}}[$color]);
        $self->ROW_r($row, [$r], $col);
        $self->{tail_cells}->{"$row,$col"} = [$row, $col, $color, $original_rend];
        $self->{cursor_tail_refresh} = urxvt::timer
            ->new
            ->after($self->{fade_speed})
            ->cb (sub { $self->want_refresh; delete $self->{cursor_tail_refresh} }) unless defined $self->{cursor_tail_refresh};
    }
  }

  return ();
}

# after refreshing: restore previous screen contents
sub on_refresh_end {
   my $self = shift;

   foreach my $cell (values %{ $self->{tail_cells} }) {
     my ($row, $col, $color, $original_rend) = @$cell;
     $self->ROW_r($row, [$original_rend], $col);
   }

   return ();
}

# When a key is pressed, start the highlighting tail at that location
sub on_key_release {
  my $self = shift;
  my ($row, $col) = $self->screen_cur();
  $self->{tail_cells}->{"$row,$col"} = [$row, $col, 0];
  $self->want_refresh;
  return ();
}

