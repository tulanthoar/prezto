let mapleader=","
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'ascenator/L9'
Plugin 'klen/python-mode'
let g:pymode_rope_completion = 0
Plugin 'vim-scripts/TaskList.vim'
Plugin 'vim-scripts/taglist.vim'
Plugin 'terryma/vim-expand-region'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'vim-scripts/YankRing.vim'
let g:yankring_replace_n_pkey = '--'
let g:yankring_replace_n_nkey = '-='
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired.git'
Plugin 'tpope/vim-repeat'
Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'
Plugin 'Shougo/deoplete.nvim'
Plugin 'scrooloose/nerdtree'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'easymotion/vim-easymotion'
Plugin 'scrooloose/syntastic'
Plugin 'majutsushi/tagbar'
Plugin 'bling/vim-airline'
Plugin 'bling/vim-bufferline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'kana/vim-textobj-user'
Plugin 'kana/vim-textobj-line'
Plugin 'kana/vim-textobj-entire'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tpope/vim-vividchalk'
Plugin 'vim-scripts/summerfruit256.vim'
Plugin 'vim-scripts/buttercream.vim'
Plugin 'Lokaltog/vim-distinguished'
Plugin 'lisposter/vim-blackboard'
Plugin 'freeo/vim-kalisi'
Plugin 'nielsmadan/harlequin'
call vundle#end()
filetype plugin indent on
" color vividchalk
set t_Co=256  " make use of 256 terminal colors
" color summerfruit256
color distinguished
" color blackboard
" color harlequin
syntax enable
let g:indent_guides_color_change_percent = 50
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=darkgray
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=darkred
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let g:ctrlp_by_filename = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_max_files = 100000
let g:ctrlp_max_depth = 400
let g:ctrlp_follow_symlinks = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_open = 1
let g:syntastic_enable_signs = 1
let g:jedi#use_tabs_not_buffers = 1
let g:multi_cursor_visual_maps = {'i':1, 'a':1, 'f':1, 'F':1, 't':1, 'T':1, 'S':1}
let g:SuperTabLongestEnhanced = 1
let g:SuperTabCrMapping = 1
let g:Tlist_Use_SingleClick=1
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#enable_refresh_always = 1
let g:deoplete#auto_complete_start_length = 1
let g:indent_guides_start_level=2
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_default_mapping = 0
let g:airline_powerline_fonts = 1
" let g:airline_theme='molokai'
let g:airline_theme='kalisi'
let g:bufferline_modified = '**'
let g:bufferline_echo = 0
let g:SuperTabDefaultCompletionType = "context"
let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'
let g:airline#extensions#quickfix#location_text = 'Location'
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tabline#enabled = 1
" let g:airline_section_b = airline#section#create(['%{getcwd()}', '  ', '%{strftime("%c")}'])
let g:airline_section_b ='%{getcwd()}'
let g:python3_host_prog = '/usr/bin/python3'
let g:NERDTreeIgnore=['\pyc$', '\~$[[file]]', '\swp$', '\git$', '\pyc$', '\pycache__$[[dir]]]']
let g:NERDTreeQuitOnOpen=0
let g:NERDTreeCascadeOpenSingleChildDir=1
let g:NERDTreeShowHidden=1
let g:NERDTreeWinSize=35
let g:NERDTreeShowFiles = 0
let g:NERDTreeMinimalUI=1
let g:multi_cursor_next_key="\<C-s>"
let g:yankring_min_element_length = 2
let g:yankring_window_height = 12
let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'il'  :0,
      \ 'ii'  :1,
      \ 'ip'  :0,
      \ 'ie'  :0,
      \ }
let g:EasyMotion_startofline = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = 'ASDFGHJKLQWERUIO;'

set cursorline
set cursorcolumn
autocmd VimEnter,Colorscheme * :hi CursorLine ctermbg=27
autocmd VimEnter,Colorscheme * :hi CursorColumn ctermbg=10
set background=dark
set cmdheight=2
set encoding=utf8
set expandtab
set ffs=unix,dos,mac
set foldcolumn=1
set hidden
set ignorecase
set linebreak
set listchars+=extends:&,precedes:&
set list
set mouse=v
set number
set numberwidth=2
set scrolljump=2
set scrolloff=5 "ensure 5 lines are above/below cursor when scrolling
set showcmd
set showmatch
set noshowmode
set showtabline=0
set smartcase
set smartindent
set smarttab
set splitright
set ts=2
set undofile
set viminfo^=% " Remember info about open buffers on close
set whichwrap+=<,>,h,l
set wildignore=*.o,*~,*.pyc
set wildignorecase

nmap <unique> css yss
vmap <unique> C <Plug>Commentary
nnoremap 0 ^
nnoremap ^ 0
cmap <unique> w!! w !sudo tee > /dev/null %
noremap <unique> <C-j> <C-W>j
noremap <unique> <C-k> <C-W>k
noremap <unique> <C-h> <C-W>h
noremap <unique> <C-l> <C-W>l
noremap <unique> <leader>; :TmuxNavigatePrevious<cr>
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

map <unique> <leader>j  <Plug>(easymotion-sol-j)
map <unique> <leader>k  <Plug>(easymotion-sol-k)
map <unique> <leader>0  <Plug>(easymotion-sol-bd-jk)
map <unique> <leader>$  <Plug>(easymotion-eol-bd-jk)
map <unique> <leader>f  <Plug>(easymotion-bd-fl)
"nmap <leader>t <Plug>(easymotion-bd-tl)
map <space>    <Plug>(easymotion-bd-f2)
map <unique> <leader><space>    <Plug>(easymotion-overwin-f2)
map <unique> <leader>G <Plug>(easymotion-bd-jk)
map <unique> <leader>w <Plug>(easymotion-bd-wl)
map <unique> <leader>e <Plug>(easymotion-bd-el)
map <unique> <leader>n <Plug>(easymotion-bd-n)
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection('f')<cr>
vnoremap <silent> # :call VisualSelection('b')<cr>

map <unique> <leader>v <Plug>(expand_region_expand)
map <unique> <leader>V <Plug>(expand_region_shrink)
nmap <unique> <leader>l :tabnext<cr>
nmap <unique> <leader>h :tabprevious<cr>
nmap <unique> <leader><Tab> :exe "tabn ".g:lasttab<cr>
nmap <unique> <leader>sp :setlocal spell!<cr>
map <unique> <leader>cd :cd %:p:h<cr>:pwd<cr>
nmap <unique> <leader>bq :Bclose<cr>:tabclose<cr>gT
nmap <unique> <leader>q :q<cr>
map <unique> <F2> mq
map <unique> <S-F2> 'q
map <unique> <leader><F2> `q
nmap <unique> <F4> :w<cr>
nmap <unique> <S-F4> :x<cr>
nmap <unique> <leader><F4> :qall<cr>
" map <F10> :tabnew<cr>:NERDTreeToggle<cr>
" map <S-F10> :tabclose<cr>
" map <leader><F10> :NERDTreeToggle<cr>
" map <F8> :vsp<cr>
" map <S-F8> :sp<cr>
" map <F7> :bnext<cr>
" map <S-F7> :bprevious<cr>
let mapleader="-"
nmap <unique> <leader>ff :CtrlP<cr>
nmap <unique> <leader>fb :CtrlPBuffer<cr>
nmap <unique> <leader>fr :CtrlPMRU<cr>
nmap <unique> <leader>fd :CtrlPDir<cr>
nmap <unique> <leader>fu :CtrlPUndo<cr>
nmap <unique> <leader>fl :CtrlPLine<cr>
nmap <unique> <leader>fc :CtrlPChange<cr>
nmap <unique> <leader>c ciw
nmap <unique> <leader>C ciW
nmap <unique> <leader>d diw
nmap <unique> <leader>D diW
nmap <unique> <leader>i dii
nnoremap <silent><unique> <leader>p :YRShow<cr>
nmap <unique> <leader>ta :TlistToggle<cr>
nmap <unique> <leader>to <Plug>TaskList
nmap <unique> <leader>nh :NERDTreeToggle "$HOME"<cr>
nmap <unique> <leader>nn :NERDTreeFind<cr>
nmap <unique> <leader>nm :NERDTreeMirror<cr>
nmap <unique> <leader>b :e ~/buffer<cr>
nmap <unique> <leader><space> :tabnew<cr>

let mapleader=","
let g:lasttab = 1
au TabLeave * let g:lasttab = tabpagenr()
" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" When editing a file, always jump to the last known cursor position.
autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
function g:Multiple_cursors_before()
        let g:deoplete#disable_auto_complete = 1
endfunction
function g:Multiple_cursors_after()
        let g:deoplete#disable_auto_complete = 0
endfunction
""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako

au FileType python map <buffer> F :set foldmethod=indent<cr>

au FileType python inoremap <buffer> $r return
au FileType python inoremap <buffer> $i import
au FileType python inoremap <buffer> $p print
au FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi
au FileType python map <buffer> <leader>1 /class
au FileType python map <buffer> <leader>2 /def
au FileType python map <buffer> <leader>C ?class
