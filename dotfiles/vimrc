let mapleader=","
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'ascenator/L9'
Plugin 'terryma/vim-expand-region'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'vim-scripts/YankRing.vim'
let g:yankring_replace_n_pkey = '<F5>'
let g:yankring_replace_n_nkey = '<S-F5>'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired.git'
Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'
Plugin 'Shougo/deoplete.nvim'
Plugin 'scrooloose/nerdtree'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'altercation/vim-colors-solarized'
Plugin 'easymotion/vim-easymotion'
Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-airline'
Plugin 'bling/vim-bufferline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'kana/vim-textobj-user'
Plugin 'kana/vim-textobj-line'
Plugin 'kana/vim-textobj-entire'
Plugin 'ctrlpvim/ctrlp.vim'
call vundle#end()
filetype plugin indent on
color desert
syntax enable
" let g:indent_guides_color_change_percent = 10
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=darkgray
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=darkred
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#enable_refresh_always = 1
let g:deoplete#auto_complete_start_length = 1
let g:indent_guides_start_level=2
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='molokai'
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_section_b = '%{getcwd()}'
let g:python3_host_prog = '/usr/bin/python3'
let g:powerline_pycmd="py3"
let g:NERDTreeIgnore=['\pyc$', '\~$[[file]]', '\swp$', '\git$', '\pyc$', '\pycache__$[[dir]]]']
let g:NERDTreeQuitOnOpen=0
let g:NERDTreeCascadeOpenSingleChildDir=1
let g:NERDTreeShowHidden=1
let g:NERDTreeWinSize=35
let g:multi_cursor_next_key="\<C-s>"
let g:yankring_min_element_length = 2

set cursorline
set cursorcolumn
" let &l:colorcolumn=join(range(1,120,10),',')
" autocmd VimEnter,Colorscheme * :hi ColorColumn ctermbg=lightgrey
autocmd VimEnter,Colorscheme * :hi CursorColumn ctermbg=black
set autoread
set ai
set background=dark
set backup
set cmdheight=2
set encoding=utf8
set eol
set expandtab
set ffs=unix,dos,mac
set foldcolumn=1
set hidden
set ignorecase
set lbr
set lcs+=extends:&,precedes:&
set list
set magic
set mat=2
set mouse=a
set number
set nuw=2
set ruler
set scrolljump=5
set showcmd
set showmatch
set showmode
set showtabline=0
set si
set smartcase
set smarttab
set so=5 "ensure 5 lines are above/below cursor when scrolling
set splitright
set timeoutlen=1200
set ts=2 sw=2 et
set undofile
set viminfo^=% " Remember info about open buffers on close
set whichwrap+=<,>,h,l
set wildignore=*.o,*~,*.pyc
set wildignorecase
set wildmenu
set wrap

nnoremap css yss
map <leader>nn :NERDTreeToggle<cr>
map <leader>nb :NERDTreeFromBookmark
map <leader>nf :NERDTreeFind<cr>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %
nmap  <Leader>p0  :YRGetElem 1<CR>
nmap  <Leader>pp  :YRPop<CR>
nmap  <Leader>f       <Plug>(easymotion-bd-fl)
let g:EasyMotion_startofline = 0
nmap <Leader>j  <Plug>(easymotion-sol-j)
nmap <Leader>k  <Plug>(easymotion-sol-k)
nmap <Leader>f  <Plug>(easymotion-bd-fl)
nmap <Leader>t  <Plug>(easymotion-bd-tl)
nmap <space>    <Plug>(easymotion-bd-f2)
nmap <Leader><space>    <Plug>(easymotion-overwin-line)
nmap  <Leader>g <Plug>(easymotion-bd-jk)
nmap  <Leader>w <Plug>(easymotion-bd-wl)
nmap  <Leader>e <Plug>(easymotion-bd-el)
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l
noremap <leader>; :TmuxNavigatePrevious<cr>
map <leader>cd :cd %:p:h<cr>:pwd<cr>
nnoremap 0 ^
nnoremap ^ 0
map <F2> :tabnext<cr>
map <S-F2> :tabprevious<cr>
map <F4> :w<cr>
map <S-F4> :x<cr>
map <leader><F4> :q!<cr>
map <F10> :tabnew<cr>:NERDTreeToggle<cr>
map <S-F10> :tabclose<cr>
map <leader><F10> :NERDTreeToggle<cr>
map <F8> :vsp<cr>
map <S-F8> :sp<cr>
map <F7> :bnext<cr>
map <S-F7> :bprevious<cr>
map <F6> mq
map <S-F6> 'q
map <leader><F6> `q
map <leader>v <Plug>(expand_region_expand)
map <leader>V <Plug>(expand_region_shrink)
" Default settings. (NOTE: Remove comments in dictionary before sourcing)
let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'il'  :0,
      \ 'ii'  :1,
      \ 'ip'  :0,
      \ 'ie'  :0,
      \ }
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
nmap <leader>q :e ~/buffer<cr>
nnoremap <leader>' ``

" Close the current buffer
nmap <leader>bq :Bclose<cr>:tabclose<cr>gT

map <leader>l :tabnext<cr>
map <leader>h :tabprevious<cr>

" Useful mappings for managing tabs
map <leader>t<space> :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>tn :tabnext

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Let 'tt' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tt :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" When editing a file, always jump to the last known cursor position.
autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako

au FileType python map <buffer> F :set foldmethod=indent<cr>

au FileType python inoremap <buffer> $r return
au FileType python inoremap <buffer> $i import
au FileType python inoremap <buffer> $p print
au FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi
au FileType python map <buffer> <leader>1 /class
au FileType python map <buffer> <leader>2 /def
au FileType python map <buffer> <leader>C ?class
