#!/usr/bin/perl
#########################################################################
# Copyright (C) 2012-2017  Wojciech Siewierski                          #
#                                                                       #
# This program is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by  #
# the Free Software Foundation, either version 3 of the License, or     #
# (at your option) any later version.                                   #
#                                                                       #
# This program is distributed in the hope that it will be useful,       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of        #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
# GNU General Public License for more details.                          #
#                                                                       #
# You should have received a copy of the GNU General Public License     #
# along with this program.  If not, see <http://www.gnu.org/licenses/>. #
#########################################################################

require re::engine::PCRE2;

sub on_action {
    re::engine::PCRE2::import;
    use Benchmark ':hireswallclock';
    my $t0 = Benchmark->new;
    my ( $self, $cmd ) = @_;

    if ( defined $self->{last_word} ) {
        $self->scr_xor_span( @{ $self->{highlight} },
            urxvt::RS_RVid | urxvt::RS_Blink );
    }
    else {
        my $precede   = '[^-\w]';
        my $end_char  = '[-\w]';
        my $matcher   = "";
        my $comp_char = '[-\w]';

        if ( $cmd eq 'word-complete' ) {
        }
        elsif ( $cmd eq 'fuzzy-WORD-complete' ) {
            $precede   = '\s';
            $matcher   = '\S*';
            $end_char  = '\S';
            $comp_char = '\S';
        }
        elsif ( $cmd eq 'surround-complete' ) {
            $precede   = '((?<q>["\'`])|(?<b>\[)|(?<p>\())';
            $matcher   = '.*?';
            $end_char  = '.*?(.(?=(?(<b>)\]|((?(<p>)\)|\g{q})))))\0';
            $comp_char = '\S';
        }
        elsif ( $cmd eq 'fuzzy-word-complete' ) {
            $matcher = '[-\w]*';
        }
        elsif ( $cmd eq 'WORD-complete' ) {
            $precede   = '\s';
            $end_char  = '\S';
            $comp_char = '\S';
        }
        elsif ( $cmd eq 'fuzzy-complete' ) {
            $precede   = '\W';
            $matcher   = '.*?';
            $end_char  = '\w';
            $comp_char = '\S';
        }
        elsif ( $cmd eq 'suffix-complete' ) {
            $precede   = '\S';
            $matcher   = '\S*';
            $end_char  = '\S';
            $comp_char = '\S';
        }
        my ( $row, $col ) = $self->screen_cur();    # get cursor coordinates
        $self->{next_row}  = $row;
        $self->{last_word} = (
            substr( $self->ROW_t($row), 0, $col ) =~
              s/.*$precede($comp_char*)\z/$1/r );
        $self->{already_completed}{ $self->{last_word} } = 1;
        $self->{last_completion} = $self->{last_word};
        my $regexp = join "$matcher",
          ( split //, quotemeta $self->{last_word} );
        $self->{regex_match} = qr/(.*${precede}|\A)(${regexp}${end_char}*)/i;
    }

    my $completion =
      @{ $self->{matches_in_row} } ? skip_duplicates $self : find_match($self);
    if ( defined $completion ) {
        replace_text( $self, $completion, $self->{last_completion} );
        $self->{last_completion} = $completion;
        highlight_match($self);
        $self->enable( key_press => \&conditional_leave );
    }
    my $t1 = Benchmark->new;
    my $td = timediff( $t1, $t0 );
    $self->line(0)->t( timestr($td) );
    re::engine::PCRE2::unimport;
    return 1;
}

######################################################################

sub conditional_leave {
    my ( $self, $event, $keysym ) = @_;

    my $keyname = $self->XKeysymToString($keysym);

    if ( $keyname eq "Escape" ) {
        $self->scr_xor_span( @{ $self->{highlight} },
            urxvt::RS_RVid | urxvt::RS_Blink )
          if defined $self->{last_word};
        undo_completion($self);
        $self->disable("key_press");
        return 1;
    }

    my $modifier_mask =
      urxvt::ControlMask | urxvt::Mod1Mask | urxvt::Mod5Mask | urxvt::Mod4Mask;

    # Stop the completion mode only when either a alphanumeric key is
    # pressed (regardless of any modifiers) or a printable key is
    # pressed without any modifiers. It is needed because the
    # key_press hooks are processed before the user_command hooks and
    # stopping on every printable character would break the completion
    # chaining. For this to work, the actions must be bound to the
    # symbol characters with some modifiers (for example
    # Ctrl+Alt+slash).
    if (
        $keyname =~ /^\w$/
        || (
            !( $event->{state} & $modifier_mask )
            && (   $keysym <= 127
                || $keyname eq "Return"
                || $keyname eq "BackSpace"
                || $keyname eq "Delete"
                || $keyname eq "Tab"
                || $keyname eq "Up"
                || $keyname eq "Down"
                || $keyname eq "Left"
                || $keyname eq "Right" )
        )
      )
    {

        $self->scr_xor_span( @{ $self->{highlight} },
            urxvt::RS_RVid | urxvt::RS_Blink )
          if defined $self->{last_word};
        leave($self);
        $self->disable("key_press");
    }

    ();
}

######################################################################

sub highlight_match {
    my $self    = shift;
    my $beg_row = $self->{next_row} + 1;
    my $re      = quotemeta $self->{last_completion};
    $self->ROW_t($beg_row) =~ /$re/;
    $self->{highlight} = [ $beg_row, $-[0], $beg_row, $+[0] ];
    $self->scr_xor_span( @{ $self->{highlight} },
        urxvt::RS_RVid | urxvt::RS_Blink );
}

######################################################################

sub replace_text {
    shift->tt_write(
        "" . join( "", split( //, length pop ) ) . "\x08" . pop );
}

######################################################################

sub skip_duplicates {
    my $self    = shift;
    my @matches = @{ $self->{matches_in_row} };
    while ( my $completion = shift @matches ) {
        next
          if exists $self->{already_completed}{$completion};
        $self->{already_completed}{$completion} = 1;
        $self->{matches_in_row} = \@matches;
        return $completion;
    }
    return (find_match $self);
}

######################################################################

# Finds the next matching completion in the row current row or above
# while skipping duplicates using skip_duplicates().
sub find_match {
    my $self = shift;

    # return
    my $current_row = $self->{next_row};
    my $regexp      = $self->{regex_match};

# cycle through all the matches in the current row if not starting a new search
# search through all the rows starting with current one or one above the last checked
    my ( $cursor_row, $cursor_column ) = $self->screen_cur();
    my @matches = ();
  OUTER: for ( my $i = $current_row ; $i >= 0 ; --$i ) {
        $_ = $self->ROW_t($i);    # get the line of text from the row
        $_ = substr $_, 0, $cursor_column if $i == $cursor_row;

        push @matches, $2 while s/$regexp/$1/;

        if (@matches) {
            $self->{next_row} = --$i;
            while ( my $completion = shift @matches ) {
                next
                  if exists $self->{already_completed}{$completion};
                $self->{already_completed}{$completion} = 1;
                $self->{matches_in_row} = \@matches;
                return $completion;
            }
            next OUTER;
        }
    }

    # no more possible completions, revert to the original word
    undo_completion($self);

    return;
}

######################################################################

sub leave {
    my $self = shift;
    delete $self->{last_word};
    delete $self->{last_completion};
    delete $self->{next_row};
    $self->{matches_in_row} = [];
    delete $self->{already_completed};
    delete $self->{regex_match};
    delete $self->{highlight};
}

######################################################################

sub undo_completion {
    my $self = shift;
    replace_text( $self, $self->{last_word}, $self->{last_completion} );
    leave($self);
}
